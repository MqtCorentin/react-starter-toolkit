// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FieldEditor Should render when value: [Function emptyFuncion] 1`] = `
<DocumentFragment>
  <input
    class="af-form__input-text"
    disabled=""
    id="name"
    name="name"
    readonly=""
    type="text"
    value="() => null"
  />
</DocumentFragment>
`;

exports[`FieldEditor Should render when value: {"labelBtnOpenCodeEditor": "Edit JSX", "type": "jsx", "value": "value"} 1`] = `
<DocumentFragment>
  <button
    class="btn af-btn af-btn--editor"
    type="submit"
  >
    <span
      class="af-btn__text"
    >
      Edit JSX
    </span>
  </button>
</DocumentFragment>
`;

exports[`FieldEditor Should render when value: {"labelBtnOpenCodeEditor": "Edit Json", "type": "json", "value": "value"} 1`] = `
<DocumentFragment>
  <button
    class="btn af-btn af-btn--editor"
    type="submit"
  >
    <span
      class="af-btn__text"
    >
      Edit Json
    </span>
  </button>
</DocumentFragment>
`;

exports[`FieldEditor Should render when value: {"options": [Array], "value": "value"} 1`] = `
<DocumentFragment>
  <div
    class="af-form__select"
  >
    <div
      class="af-form__select-container"
    >
      <select
        aria-label="select-name"
        class="af-form__input-select"
        id="name"
        name="name"
      />
      <span
        aria-controls="name"
        class="glyphicon glyphicon-menu-down"
      />
    </div>
  </div>
</DocumentFragment>
`;

exports[`FieldEditor Should render when value: true 1`] = `
<DocumentFragment>
  <div
    class="af-form__checkbox-toggle"
  >
    <input
      checked=""
      class="af-form__input-checkbox"
      id="name"
      mode="toggle"
      name="name"
      type="checkbox"
    />
    <label
      class="af-form__label"
      for="name"
    >
      <span
        class="af-form__indicator"
      >
        <i
          class="glyphicon glyphicon-ok"
        />
      </span>
      <span
        class="af-form__description"
      />
    </label>
  </div>
</DocumentFragment>
`;

exports[`FieldEditor Should render when value: value 1`] = `
<DocumentFragment>
  <input
    class="af-form__input-text"
    id="name"
    name="name"
    type="text"
    value="value"
  />
</DocumentFragment>
`;

exports[`withEditor Should render Component with FormEditor when apply withEditor HOC 1`] = `
<DocumentFragment>
  <section
    class="af-editor"
  >
    <input
      class="af-component"
      id="idtext"
      name="nametext"
      type="text"
      value="hello"
    />
  </section>
</DocumentFragment>
`;

exports[`withEditor Should render Component with FormEditor when apply withEditor HOC and isOpenEditor true 1`] = `
<DocumentFragment>
  <section
    class="af-editor"
  >
    <input
      class="af-component"
      id="idtext"
      name="nametext"
      type="text"
      value="hello"
    />
    <div
      class="af-draggable-container react-draggable"
      style="transform: translate(0px,0px);"
    >
      <div
        class="af-draggable"
      >
        <h3
          class="af-draggable__title"
        >
          Props Editor
          <div
            class="af-draggable__tools"
          >
            <i
              class="glyphicon glyphicon-move"
            />
            <i
              class="glyphicon glyphicon-close"
            />
          </div>
        </h3>
        <div
          class="af-draggable__content"
        >
          <form
            class="af-form-editor"
          >
            <div
              class="af-form-editor__field"
            >
              <label
                class="af-form__group-label"
                for="className"
              >
                className
              </label>
              <input
                class="af-form__input-text"
                id="className"
                name="className"
                type="text"
                value="af-component"
              />
            </div>
          </form>
        </div>
      </div>
    </div>
  </section>
</DocumentFragment>
`;

exports[`withEditor Shouldn't render Component with isOpenEditor false 1`] = `
<DocumentFragment>
  <section
    class="af-editor"
  >
    <input
      class="af-component"
      id="idtext"
      name="nametext"
      type="text"
      value="hello"
    />
  </section>
</DocumentFragment>
`;
